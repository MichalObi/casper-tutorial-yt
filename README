# Project Description

This repository contains two projects based on the official Casper Lab tutorial, also known as the "Casper Association dApp Developer Series" on YouTube.

To work with these projects, both Rust and Node need to be installed.

Also you need CSPR tokens in your account to make propper smart contract deploy. 

## Project 1: my-project / casper-interface - basic project

"My Project" requires the cargo-casper crate to work properly and build the smart contract. Most of the template files are generated by `cargo casper my-project`. To compile the contract, we use `make prepare` and `make build-contract`. The contract contains a message field that can be set, updated, and queried via the `index.js` Node script. The contract must first be deployed to the Casper network testnet. An extended version of the app is placed in the casper-interface folder.

## Project 2: cep-78-enhanced-nft / cep78-script / nft-interaction

The NFT test script is based on the CEP-78 Casper format that allows for the creation of NFTs by defining a set of fields defined in the `cep-78-enhanced-nft` folder that contains the smart contract. In `cep78-script` we have only simple node - smart contract interaction, on `nft-interacion` folder we have UI to interact with smart-contract not directly via React front-end.

To work with these demos, you will need to follow these steps:

1) Install Rust, which is needed to compile the Smart Contract, and Node.js, which is necessary to run the server for deploying and querying the smart contract as well as running the front-end React application.

2) Generate your private and public keys.

3) Create an account on the Casper testnet or obtain some CSPR via the Faucet for blockchain operations.

4) Add your secret key using the Chrome Extension Signer.

5) Prepare and compile your smart contract, remembering to target wasm32-unknown-unknown.

6) Prepare a node script to connect to the Casper Client, find connected peers on the testnet, and deploy the smart contract on the blockchain.

7) Use the functions declared in the main node script to interact with the smart contract, such as querying it.

8) If you want to use the extended React application, install its dependencies, run node server (double-check available port!) by `node index.js` and run the front-end application using `npm run start`.